__version__ = (2, 3, 1)
# meta developer: –ê–Ω–æ–Ω–∏–º?
from .. import loader, utils
from hikkatl.tl.types import Message
import asyncio, re, telethon, string

class CowMod(loader.Module):
    """–ö–æ—Ä–æ–≤`—è—á–∞ –¥–æ–≤–µ—Ä–∫–∞
üè∑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ù–∏–∫ (–∞—Ä–≥—É–º–µ–Ω—Ç)\n
üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  üêÑ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–æ–≤–∫–æ–π ‚Äî –º—É–∫, –º—É–ª—Å, –º—É–¥, –º—É–∞, –º—É–≤, –º—É–∑, –º—É–∫—Ä, –º—É–Ω, –º—É—Ñ, –º—É–≥, –º—É–∫–æ, –º—É–∫—É, –º—É–ª, –º—É—Å, –º—É–±, –º—É–±–∏, –ø–æ–∫
  üêÇ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª—è–º ‚Äî –±–±, –±–±—Ç, –±–±–∑, –±–±—Ü, –±–±—É, –±–±–ø, –±–±–¥, –±–±—è, –±–±—á, –±–±—Å, –±–±–º, –±–±–∏, –±–±—Ä
  üéí –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—é–∫–∑–∞–∫–æ–º ‚Äî –ª–æ–≥[–∏–∫–∞], –ø–∞–º[—è—Ç—å], —á—Ç–µ[–Ω–∏–µ], —Ñ–∏–∑[—É—Ö–∞], —Ñ–∞–Ω[—Ç–∞–∑–∏—è], –∫—Ä–µ[–∞—Ç–∏–≤–Ω–æ—Å—Ç—å] (—Ü–∏—Ñ—Ä–∞)
  üß§ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∞—Ñ—Ç–∞–º–∏ ‚Äî –∫—Ä–∞—Ñ—Ç (1-50) 
  üê• –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü—ã–ø–∞–º–∏ ‚Äî —Ü—ã–ø–∞ (1-10)
  üëÄ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∑ ‚Äî –º–∑ (–ø—Ä–µ–¥–º–µ—Ç), (–ø—Ä–µ–¥–º–µ—Ç)...
  üëÄ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å ‚Äî —Ä–µ—Å (–ø—Ä–µ–¥–º–µ—Ç), (–ø—Ä–µ–¥–º–µ—Ç)...
  üåø –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∏–Ω—É—Ç—å ‚Äî –∫–∏–Ω—É—Ç—å (–ø—Ä–µ–¥–º–µ—Ç),  [—Ç|—Ç–∞–ª(–∏—Å–º–∞–Ω), –ø–∏–∫—Å–∏]
  üïπ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ ‚Äî (-‚àû; +‚àû)
  ‚ú® –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø. –∫–æ–º–∞–Ω–¥–∞–º–∏ ‚Äî –º—É—É, –∞–¥–¥, —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å, —Ö|—Ö–µ—Ä[–æ–º–∞–Ω—Ç]"""
    strings = {"name": "CowMod"}

    async def client_ready(self, client, db):
        self.db = db
        self.client = client #IDS
        if not self.db.get("CowMod", "dovs_ids", False):
            self.db.set("CowMod", "dovs_ids", [])
        if not self.db.get("CowMod", "prefix", False):
            self.db.set("CowMod", "prefix", "–ì")
        self.cow_actions = {"–º—É–∫": "–ú—É–∫", "–º—É–ª—Å": "–ú—É–ª—Å", "–º—É—Ñ": "–ú—É—Ñ", "–º—É–∞": "–ú—É–∞", "–º—É—Å": "–ú—É—Å", "–º—É–≤": "–ú—É–≤", "–º—É–∑": "–ú—É–∑", "–º—É–¥": "–ú—É–¥", "–º—É–∫–æ": "–ú—É–∫–æ", "–º—É–∫—É": "–ú—É–∫—É", "–º—É–ª": "–ú—É–ª", "–º—É–≥": "–ú—É–≥", "–º—É–±–∏": "–ú—É–±–∏", "–º—É–±": "–ú—É–±", "–º—É–∫—Ä": "–ú—É–∫—Ä", "–º—É—É": "–ú—É—É", "–º—É–Ω": "–ú—É–Ω", "–ø–æ–∫": "–ü–æ–∫"}
        self.bull_actions = {"–±–±": "–ë–±", "–±–±—Ç": "–ë–±—Ç", "–±–±–∑": "–ë–±–∑", "–±–±—Ü": "–ë–±—Ü", "–±–±—É": "–ë–±—É", "–±–±–ø": "–ë–±–ø", "–±–±–¥": "–ë–±–¥", "–±–±—è": "–ë–±—è", "–±–±—á": "–ë–±—á", "–±–±—Å": "–ë–±—Å", "–±–±–º": "–ë–±–º", "–±–±–∏": "–ë–±–∏", "–±–±—Ä": "–ë–±—Ä"}
        self.bp_actions = [("–ª–æ–≥[–∏–∫–∞]{,3}\s\d+$", "–õ–æ–≥–∏–∫–∞"), ("–ø–∞–º[—è—Ç—å]{,3}\s\d+$", "–ü–∞–º—è—Ç—å"), ("—á—Ç–µ[–Ω–∏–µ]{,3}\s\d+$", "–ß—Ç–µ–Ω–∏–µ"), ("—Ñ–∏–∑[—É—Ö–∞]{,3}\s\d+$", "–§–∏–∑—É—Ö–∞"), ("—Ñ–∞–Ω[—Ç–∞–∑–∏—è]{,5}\s\d+$", "–§–∞–Ω—Ç–∞–∑–∏—è"), ("–∫—Ä–µ[–∞—Ç–∏–≤–Ω–æ—Å—Ç—å]{,9}\s\d+$", "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")]
        self.dovs_ids = self.db.get("CowMod", "dovs_ids")
        self.prefix = self.db.get("CowMod", "prefix")
        
    async def watcher(self, message):
        if not isinstance(message, telethon.tl.types.Message): return
        reply = await message.get_reply_message()
        author, content = await message.get_sender(), message.message
        args = utils.get_args_raw(message)

# –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–æ–≤–∫–æ–π
        if author.id in self.dovs_ids:
            for action, response in self.cow_actions.items():
                pattern = self.prefix + r'\s+' + action + "$"
                if re.match(pattern, content, re.IGNORECASE):
                    await message.respond(response)

# –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–µ–ª—è–º–∏
        if author.id in self.dovs_ids:
            for action, response in self.bull_actions.items():
                pattern = self.prefix + r'\s+' + action + "$"
                if re.match(pattern, content, re.IGNORECASE):
                    await message.respond(response)
# –î–µ–π—Å—Ç–≤–∏—è —Å —Ä—é–∫–∑–∞–∫–æ–º   
        if author.id in self.dovs_ids:
            for action, response in self.bp_actions:
                if re.match(r := self.prefix + r'\s+' + action + "( \d+|)$", content, re.IGNORECASE):
                    await reply.reply(args)

# –î–µ–π—Å—Ç–≤–∏—è —Å –∫—Ä–∞—Ñ—Ç–æ–º
        if author.id in self.dovs_ids and (r := re.match(self.prefix + r' –∫—Ä–∞—Ñ—Ç( \d+|)$', content, re.IGNORECASE)):
            if r.group(1):
                craft_value = int(r.group(1))
                if 1 <= craft_value <= 50:
                    await reply.reply(str(craft_value))

# –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏       
        if author.id in self.dovs_ids and re.search(self.prefix + r'\s+—Ç(?:–∞–ª(?:–∏(?:—Å(?:–º(?:–∞–Ω?)?)?)?)?)?$', content, re.IGNORECASE):
            await message.reply("–ö–∏–Ω—É—Ç—å —Ç–∞–ª–∏—Å–º–∞–Ω")
        if author.id in self.dovs_ids and re.match(self.prefix + r'\s+–ø–∏–∫—Å–∏$', content, re.IGNORECASE):
            await message.reply("–ö–∏–Ω—É—Ç—å –ø–∏–∫—Å–∏")
        if author.id in self.dovs_ids and re.match(self.prefix + r'\s+—Ö(?:–µ—Ä(?:–æ(?:–º(?:–∞(?:–Ω(?:—Ç?)?)?)?)?)?)?$', content, re.IGNORECASE):
            await message.reply("–•–µ—Ä–æ–º–∞–Ω—Ç")
        if author.id in self.dovs_ids and re.match(self.prefix + r'\s+–∞–¥–¥$', content, re.IGNORECASE):
            await reply.reply("–ê–¥–¥")

# –î–µ–π—Å—Ç–≤–∏—è —Å —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å
        args = utils.get_args_raw(message)
        if author.id in self.dovs_ids and (r := re.match(self.prefix + r' —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å\s\w+\s\d+$', content, re.IGNORECASE)):
            await message.reply(str(args))

# –î–µ–π—Å—Ç–≤–∏—è —Å –∫–∏–Ω—É—Ç—å
        if author.id in self.dovs_ids and (r := re.search(self.prefix + r' –∫–∏–Ω—É—Ç—å\s\w+', content, re.IGNORECASE)):
            await message.reply(str(args))

# –î–µ–π—Å—Ç–≤–∏—è —Å –º–∑
        args = utils.get_args_raw(message)
        if author.id in self.dovs_ids and (r := re.match(self.prefix + r' –º–∑\s\w+', content, re.IGNORECASE)):
            await message.reply(str(args))

# –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ—Å
        args = utils.get_args_raw(message)
        if author.id in self.dovs_ids and (r := re.match(self.prefix + r' —Ä–µ—Å\s\w+', content, re.IGNORECASE)):
            await message.reply(str(args))

# –î–µ–π—Å—Ç–≤–∏—è —Å —Ü—ã–ø–∞–º–∏
        if author.id in self.dovs_ids and (r := re.match(self.prefix + r' —Ü—ã–ø–∞( \d+|)$', content, re.IGNORECASE)):
            if r.group(1) and int(r.group(1)) > 10: return
            for _ in range(int((r.group(1) or f' {1}')[1:])):
                await message.reply("–ö–∏–Ω—É—Ç—å —Ü—ã–ø–∞")
                await asyncio.sleep(2)

# –î–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω–ª–∞–π–Ω–∞–º–∏
        try:
            n = int(args)-1
            if author.id in self.dovs_ids and re.match(self.prefix + r'\s+' + str(args), content, re.IGNORECASE):
                await reply.click(n)
        except ValueError: return

    @loader.owner
    async def dovcmd(self, message):
        """(–∞—Ä–≥—É–º–µ–Ω—Ç 1) (–∞—Ä–≥—É–º–µ–Ω—Ç 2)
        –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!"""
        args = utils.get_args(message)
        if len(args) < 1:
            dovs_ids_str = ', '.join(f'<code>@{id}</code>' for id in self.dovs_ids)
            await self.inline.form(f"üåò <code>.dov —Å–µ—Ç</code>  <i>id/—Ä–µ–ø–ª–∞–π</i> <b>‚Äî –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.</b>\n    üêÆ <b>–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n{dovs_ids_str}\n\nüåò <code>.dov –Ω–∏–∫</code> <i>–Ω–∏–∫</i> <b>‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫.</b>\n   üêÆ <b>–í–∞—à –Ω–∏–∫:</b> <code>{utils.escape_html(self.prefix)}</code>", message, {'text': '–∑–∞–∫—Ä—ã—Ç—å', 'action': 'close'})
        return

        if args[0].lower() == "–Ω–∏–∫":
            new_prefix = args[1]
            self.prefix = new_prefix
            self.db.set("CowMod", "prefix", new_prefix)
            await message.respond(f"‚úÖ <b>–ù–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:</b> {new_prefix}")
        elif args[0].lower() == "—Å–µ—Ç":
            if len(args) < 2 and not (message.is_reply and message.reply_to_msg_id):
                await message.respond("‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω id/—Ä–µ–ø–ª–∞–π.</b>")
                return

            if message.is_reply and message.reply_to_msg_id:
                reply_message = await message.get_reply_message()
                if reply_message.sender_id:
                    new_id = reply_message.sender_id
                    if new_id in self.dovs_ids:
                        self.dovs_ids.remove(new_id)
                        await message.respond(f"‚úÖ <b>–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞:</b> {new_id}")
                    else:
                        self.dovs_ids.append(new_id)
                        await message.respond(f"‚úÖ <b>–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b> {new_id}")
                else:
                    await message.respond("‚ùå <b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!</b>")
            else:
                new_id = args[1].lstrip("@")
                if new_id.isdigit():
                    new_id = int(new_id)
                    if new_id in self.dovs_ids:
                        self.dovs_ids.remove(new_id)
                        await message.respond(f"‚úÖ <b>–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞:</b> {new_id}")
                    else:
                        self.dovs_ids.append(new_id)
                        await message.respond(f"‚úÖ <b>–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:</b> {new_id}")
                else:
                    await message.respond("‚ùå <b>–≠—Ç–æ –Ω–µ id/—Ä–µ–ø–ª–∞–π</b>")
        else:
            await message.respond("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã!</b>")
